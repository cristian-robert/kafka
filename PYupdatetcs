import re
from pathlib import Path
import os
import glob
import csv

def escape_quotes(text):
    return text.replace('"', '""')

def get_existing_test_cases(csv_file):
    existing_tests = set()
    if os.path.exists(csv_file):
        with open(csv_file, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # Skip header
            for row in reader:
                if row[0] == 'Test Case' and row[1]:  # Only get the test case titles
                    existing_tests.add(row[1].strip('"'))
    return existing_tests

def parse_table(table_lines):
    """Parse Cucumber table into a list of dictionaries with proper header mapping"""
    if not table_lines:
        return [], []
    
    # Get headers - account for the leading and trailing '|'
    header_line = table_lines[0]
    header_parts = [part.strip() for part in header_line.split('|')]
    # Remove empty strings that might appear at the beginning or end
    headers = [h for h in header_parts if h]
    
    rows = []
    for data_line in table_lines[1:]:
        # Split by '|' and strip whitespace
        line_parts = [part.strip() for part in data_line.split('|')]
        # Filter out empty strings
        values = [v for v in line_parts if v != ""]
        
        # Create a dictionary mapping headers to values
        if len(values) == len(headers):
            row_dict = {headers[i]: values[i] for i in range(len(headers))}
            rows.append(row_dict)
        else:
            print(f"Warning: Mismatched columns in line: {data_line}")
            print(f"Headers: {headers} (count: {len(headers)})")
            print(f"Values: {values} (count: {len(values)})")
    
    return headers, rows

def parse_new_scenarios_to_csv(existing_csv, output_csv):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    output_path = os.path.join(current_dir, output_csv)
    existing_csv_path = os.path.join(current_dir, existing_csv)
    
    # Get existing test cases
    existing_tests = get_existing_test_cases(existing_csv_path)
    print(f"Found {len(existing_tests)} existing test cases")
    new_scenarios_found = False
    
    # Create/open the CSV file with headers
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write('Work Item Type,Title,Test,Step Action,Step Expected,Area Path\n')
        
        # Get all .feature files in the current directory
        feature_files = glob.glob(os.path.join(current_dir, "*.feature"))
        print(f"Found {len(feature_files)} feature files: {feature_files}")
        
        for feature_file in feature_files:
            print(f"\nProcessing file: {feature_file}")
            content = Path(feature_file).read_text(encoding='utf-8')
            
            # First find all scenario blocks using split
            scenario_blocks = content.split('Scenario Outline:')[1:]
            print(f"Found {len(scenario_blocks)} scenario blocks after split")
            
            for block_index, block in enumerate(scenario_blocks, 1):
                print(f"\nProcessing block {block_index}:")
                
                # Get title (first line)
                title_match = re.match(r'\s*(.*?)(?=\n)', block)
                raw_title = title_match.group(1).strip() if title_match else ''
                print(f"Raw title: {raw_title}")
                
                # Get steps
                step_matches = re.finditer(r'(Given|When|Then|And|But)\s+(.+?)(?=\n|$)', block)
                steps = [step.group().strip() for step in step_matches]
                print(f"Found {len(steps)} steps")
                
                # Find Examples section
                if 'Examples:' in block:
                    examples_parts = block.split('Examples:')
                    table_text = examples_parts[-1].strip()
                    
                    # Parse table - only take lines containing '|'
                    table_lines = [line.strip() for line in table_text.split('\n') if '|' in line]
                    
                    if table_lines:
                        # Parse the table properly
                        headers, rows = parse_table(table_lines)
                        print(f"Parsed headers: {headers}")
                        print(f"Found {len(rows)} data rows")
                        
                        # Check if testId column exists
                        has_test_id_column = 'testId' in headers
                        print(f"Has testId column: {has_test_id_column}")
                        
                        # Process each row
                        for row_index, row_dict in enumerate(rows, 1):
                            print(f"\nRow {row_index}: {row_dict}")
                            
                            # Skip if testId column exists and has a non-empty value
                            if has_test_id_column:
                                test_id_value = row_dict.get('testId', '')
                                if test_id_value:
                                    print(f"Skipping row with non-empty testId: '{test_id_value}'")
                                    continue
                                else:
                                    print(f"Processing row with empty testId")
                            
                            # Apply values to title and steps
                            current_title = raw_title
                            current_steps = steps.copy()
                            
                            # Replace placeholders in title and steps
                            for header, value in row_dict.items():
                                placeholder = f"<{header}>"
                                value = value.replace('&', 'and')
                                current_title = current_title.replace(placeholder, value)
                                current_steps = [step.replace(placeholder, value) for step in current_steps]
                            
                            print(f"Processed title: {current_title}")
                            
                            # Escape quotes for CSV
                            current_title = escape_quotes(current_title)
                            current_steps = [escape_quotes(step) for step in current_steps]
                            
                            # Create the full test case title
                            feature_name = os.path.basename(feature_file).replace('.feature', '')
                            full_title = f"{feature_name} - {current_title}"
                            
                            # Only write if this is a new test case
                            if f'"{full_title}"' not in existing_tests:
                                new_scenarios_found = True
                                print(f"New scenario found: {full_title}")
                                f.write(f'Test Case,"{full_title}",,,,TestArea\n')
                                for i, step in enumerate(current_steps, 1):
                                    f.write(f',,{i},"{step}",Executed successfully,\n')
                            else:
                                print(f"Skipping existing scenario: {full_title}")
                    else:
                        print("WARNING: No table lines found in Examples section!")
                else:
                    print("WARNING: No Examples section found in this block!")
    
    if not new_scenarios_found:
        print("\nNo new scenarios found.")
        if os.path.exists(output_path):
            os.remove(output_path)
    else:
        print(f"\nNew scenarios have been written to {output_csv}")

# Usage
parse_new_scenarios_to_csv('azure_tests.csv', 'updated_azure_tests.csv')
