import re
from pathlib import Path
import os
import glob
import csv

def escape_quotes(text):
    return text.replace('"', '""')

def get_existing_test_cases(csv_file):
    existing_tests = set()
    if os.path.exists(csv_file):
        with open(csv_file, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # Skip header
            for row in reader:
                if row[0] == 'Test Case' and row[1]:  # Only get the test case titles
                    existing_tests.add(row[1].strip('"'))
    return existing_tests

def parse_new_scenarios_to_csv(existing_csv, output_csv):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    output_path = os.path.join(current_dir, output_csv)
    existing_csv_path = os.path.join(current_dir, existing_csv)
    
    # Get existing test cases
    existing_tests = get_existing_test_cases(existing_csv_path)
    print(f"Found {len(existing_tests)} existing test cases")
    new_scenarios_found = False
    
    # Create/open the CSV file with headers
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write('Work Item Type,Title,Test,Step Action,Step Expected,Area Path\n')
        
        # Get all .feature files in the current directory
        feature_files = glob.glob(os.path.join(current_dir, "*.feature"))
        print(f"Found {len(feature_files)} feature files: {feature_files}")
        
        for feature_file in feature_files:
            print(f"\nProcessing file: {feature_file}")
            content = Path(feature_file).read_text(encoding='utf-8')
            print(f"File content length: {len(content)} characters")
            
            # First find all scenario blocks using split
            print("\nTrying to split content on 'Scenario Outline:'")
            scenario_blocks = content.split('Scenario Outline:')[1:]  # Skip first part before first scenario
            print(f"Found {len(scenario_blocks)} scenario blocks after split")
            
            for block_index, block in enumerate(scenario_blocks, 1):
                print(f"\nProcessing block {block_index}:")
                print("=" * 50)
                print(block)
                print("=" * 50)
                
                # Get title (first line)
                title_match = re.match(r'\s*(.*?)(?=\n)', block)
                raw_title = title_match.group(1).strip() if title_match else ''
                print(f"Raw title: {raw_title}")
                
                # Get steps
                step_matches = re.finditer(r'(Given|When|Then|And|But)\s+(.+?)(?=\n|$)', block)
                steps = [step.group().strip() for step in step_matches]
                print(f"Found {len(steps)} steps: {steps}")
                
                # Find Examples section
                if 'Examples:' in block:
                    examples_parts = block.split('Examples:')
                    table_text = examples_parts[-1].strip()  # Get the last Examples section
                    print("\nTable text found:")
                    print(table_text)
                    
                    # Parse table
                    table_lines = [line.strip() for line in table_text.split('\n') if '|' in line]
                    if table_lines:
                        # Extract and clean up headers
                        header_line = table_lines[0]
                        headers = [h.strip() for h in header_line.split('|') if h.strip()]
                        print(f"Raw headers: {headers}")
                        
                        # Find testId column index
                        test_id_index = -1
                        for i, header in enumerate(headers):
                            if header == 'testId':
                                test_id_index = i
                                print(f"Found testId at index {test_id_index}")
                                break
                        
                        # If testId column exists, process each row checking testId value
                        if test_id_index >= 0:
                            # Process data rows
                            for row_index, row in enumerate(table_lines[1:], 1):
                                print(f"\nProcessing row {row_index}: {row}")
                                
                                # Extract values from row
                                values = [v.strip() for v in row.split('|') if v.strip() != '']
                                print(f"Values in row: {values}")
                                
                                # Check if we have a testId and if it's empty
                                has_empty_test_id = False
                                if test_id_index < len(values):
                                    test_id_value = values[test_id_index]
                                    print(f"testId value: '{test_id_value}'")
                                    if not test_id_value:
                                        has_empty_test_id = True
                                        print("Found row with empty testId - will generate test case")
                                else:
                                    # If index is out of range, consider it empty
                                    has_empty_test_id = True
                                    print("testId index out of range - treating as empty")
                                
                                if not has_empty_test_id:
                                    print(f"Skipping row with non-empty testId")
                                    continue
                                
                                # Now create a mapping of placeholders to values
                                placeholder_values = {}
                                for i, header in enumerate(headers):
                                    if i < len(values):
                                        placeholder_values[f"<{header}>"] = values[i].replace('&', 'and')
                                
                                print(f"Placeholder mapping: {placeholder_values}")
                                
                                # Apply placeholder values to title and steps
                                current_title = raw_title
                                current_steps = steps.copy()
                                
                                for placeholder, value in placeholder_values.items():
                                    current_title = current_title.replace(placeholder, value)
                                    current_steps = [step.replace(placeholder, value) for step in current_steps]
                                
                                print(f"Processed title: {current_title}")
                                print(f"Processed steps: {current_steps}")
                                
                                current_title = escape_quotes(current_title)
                                current_steps = [escape_quotes(step) for step in current_steps]
                                
                                feature_name = os.path.basename(feature_file).replace('.feature', '')
                                full_title = f"{feature_name} - {current_title}"
                                
                                # Only write if this is a new test case
                                if f'"{full_title}"' not in existing_tests:
                                    new_scenarios_found = True
                                    print(f"New scenario found: {full_title}")
                                    f.write(f'Test Case,"{full_title}",,,,TestArea\n')
                                    for i, step in enumerate(current_steps, 1):
                                        f.write(f',,{i},"{step}",Executed successfully,\n')
                                else:
                                    print(f"Skipping existing scenario: {full_title}")
                        else:
                            print("No testId column found - processing all rows as before")
                            # Process all rows if no testId column exists (original behavior)
                            for row_index, row in enumerate(table_lines[1:], 1):
                                print(f"\nProcessing row {row_index}: {row}")
                                values = [v.strip() for v in row.split('|') if v.strip() != '']
                                headers_clean = [h.strip() for h in table_lines[0].split('|') if h.strip()]
                                
                                values_dict = {}
                                for i, header in enumerate(headers_clean):
                                    if i < len(values):
                                        values_dict[header] = values[i]
                                
                                current_title = raw_title
                                current_steps = steps.copy()
                                
                                for header, value in values_dict.items():
                                    value = value.replace('&', 'and')
                                    current_title = current_title.replace(f'<{header}>', value)
                                    current_steps = [step.replace(f'<{header}>', value) for step in current_steps]
                                
                                current_title = escape_quotes(current_title)
                                current_steps = [escape_quotes(step) for step in current_steps]
                                
                                feature_name = os.path.basename(feature_file).replace('.feature', '')
                                full_title = f"{feature_name} - {current_title}"
                                
                                # Only write if this is a new test case
                                if f'"{full_title}"' not in existing_tests:
                                    new_scenarios_found = True
                                    print(f"New scenario found: {full_title}")
                                    f.write(f'Test Case,"{full_title}",,,,TestArea\n')
                                    for i, step in enumerate(current_steps, 1):
                                        f.write(f',,{i},"{step}",Executed successfully,\n')
                                else:
                                    print(f"Skipping existing scenario: {full_title}")
                    else:
                        print("WARNING: No table lines found in Examples section!")
                else:
                    print("WARNING: No Examples section found in this block!")
    
    if not new_scenarios_found:
        print("\nNo new scenarios found.")
        if os.path.exists(output_path):
            os.remove(output_path)
    else:
        print(f"\nNew scenarios have been written to {output_csv}")

# Usage
parse_new_scenarios_to_csv('azure_tests.csv', 'updated_azure_tests.csv')
