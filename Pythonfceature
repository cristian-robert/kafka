param(
    [string]$FeatureFilePath = "path/to/your/feature/file.feature",
    [string]$OutputCsvPath = "azure_testcases.csv"
)

function Parse-FeatureFile {
    param([string]$Content)
    
    $testCases = @()
    $scenarioPattern = '(?s)Scenario Outline:(.*?)Examples:(.*?)(?=\n\s*(?:Scenario|$))'
    
    $scenarios = [regex]::Matches($Content, $scenarioPattern)
    
    foreach ($scenario in $scenarios) {
        $scenarioText = $scenario.Value
        $title = ($scenarioText -split '\n')[0] -replace 'Scenario Outline:', '' | % { $_.Trim() }
        
        $steps = @()
        $stepPattern = '(Given|When|Then|And|But)\s+(.+)'
        [regex]::Matches($scenarioText, $stepPattern) | % {
            $steps += $_.Value.Trim()
        }
        $stepsText = $steps -join "`n"
        
        $tablePattern = '(?s)Examples:.*?\|(.*?)\|.*?\n((?:\s*\|.*\|\s*\n?)+)'
        $tableMatch = [regex]::Match($scenarioText, $tablePattern)
        
        if ($tableMatch.Success) {
            $headers = $tableMatch.Groups[1].Value -split '\|' | % { $_.Trim() } | ? { $_ }
            $rows = $tableMatch.Groups[2].Value -split '\n' | % { $_.Trim() } | ? { $_ }
            
            for ($i = 0; $i -lt $rows.Count; $i++) {
                $values = $rows[$i] -split '\|' | Select-Object -Skip 1 -SkipLast 1 | % { $_.Trim() }
                $testSteps = $stepsText
                
                for ($j = 0; $j -lt $headers.Count; $j++) {
                    $testSteps = $testSteps -replace "<$($headers[$j])>", $values[$j]
                }
                
                $testCases += [PSCustomObject]@{
                    'Title' = "$title - Example $($i + 1)"
                    'Description' = "Generated from Cucumber scenario with example $($i + 1)"
                    'Test Steps' = $testSteps
                    'Expected Result' = "Test passes successfully"
                }
            }
        }
    }
    
    return $testCases
}

# Read feature file and parse content
$content = Get-Content -Path $FeatureFilePath -Raw
$testCases = Parse-FeatureFile -Content $content

# Export to CSV
$testCases | Export-Csv -Path $OutputCsvPath -NoTypeInformation -Encoding UTF8
